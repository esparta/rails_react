version: '3.0'

services:
  js: &js
    build:
      context: .
      dockerfile: ./.dockerdev/React.Dockerfile
      args:
        NODE_VERSION: '14.11.0'
    image: react_app:0.0.1
    tmpfs:
      - /tmp

  react: &react
    <<: *js
    tty: true
    volumes:
      - ./client:/app:cached
      - node_modules:/app/node_modules
    command: /bin/bash

  frontend:
    <<: *react
    ports:
      - '3001:3000'
    command: yarn start --verbose

  app: &app
    build:
      context: .
      dockerfile: ./.dockerdev/Dockerfile
      args:
        RUBY_VERSION: '2.6.3'
        PG_MAJOR: '11'
        BUNDLER_VERSION: '2.0.1'
    image: rails_react:0.0.2
    tmpfs:
      - /tmp

  backend: &backend
    <<: *app
    stdin_open: true
    tty: true
    volumes:
      - ./server:/app:cached
      - rails_cache:/app/tmp/cache
      - bundle:/usr/local/bundle
      - .dockerdev/.psqlrc:/root/.psqlrc:ro
    environment:
      - RAILS_ENV=${RAILS_ENV:-development}
      - DB_HOST=postgres
      - WEB_CONCURRENCY=1
      - HISTFILE=/app/log/.bash_history
      - PSQL_HISTFILE=/app/log/.psql_history
      - EDITOR=vi
      - DATABASE_URL=${DATABASE_URL}
    depends_on:
      - postgres

  runner:
    <<: *backend
    command: /bin/bash

  guard:
    <<: *backend
    command: bundle exec guard
    environment:
      - RAILS_ENV=${RAILS_ENV:-test}
      - DATABASE_URL=${DATABASE_URL}
      - DB_HOST=postgres

  rails:
    <<: *backend
    command: bundle exec rails server -b 0.0.0.0
    ports:
      - '3000:3000'

  postgres:
    image: postgres:11-alpine
    volumes:
      - .psqlrc:/root/.psqlrc:ro
      - postgres:/var/lib/postgresql/data
      - ./log:/root/log:cached
    environment:
      - PSQL_HISTFILE=/root/log/.psql_history
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - 5432

volumes:
  postgres:
  bundle:
  rails_cache:
  node_modules:
